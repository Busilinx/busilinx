<?php
// $Id: regcode.module,v 1.4.2.25 2011/02/18 10:59:49 aidan Exp $

// Define validation error codes
define('REGCODE_VALIDITY_NOTEXISTING',  0);
define('REGCODE_VALIDITY_NOTAVAILABLE', 1);
define('REGCODE_VALIDITY_TAKEN',        2);
define('REGCODE_VALIDITY_EXPIRED',      3);

define('REGCODE_MODE_REPLACE', 0);
define('REGCODE_MODE_SKIP',    1);

define('REGCODE_CLEAN_TRUNCATE', 1);
define('REGCODE_CLEAN_INACTIVE', 3);
define('REGCODE_CLEAN_EXPIRED',  4);


/**
 * @todo Add a hook to modify the taxonomy page so options can't be changed
 */


/**
 * Implementation of hook_help().
 */
function regcode_help($path, $arg) {
  $output = '';  //declare your output variable
  switch ($path) {
    case 'admin/help#regcode':
      $output  = '<p>'. t('Prevents users from registering without an invitation code.') .'</p>';
      break;
    case 'admin/user/regcode':
      $output  = '<p>'. t('View and manage created registration codes.') .'</p>';
      break;
    case 'admin/user/regcode/create':
      $output  = '<p>'. t('Create manually or generate new registration codes.') .'</p>';
      break;
    case 'admin/user/regcode/manage':
      $output  = '<p>'. t('Provides bulk management features for created registration codes.') .'</p>';
      break;
    case 'admin/user/regcode/settings':
      $output  = '<p>'. t('Configure the registration code module.') .'</p>';
      break;
  }
  return $output;
}


/**
 * Implementation of hook_perm().
 */
function regcode_perm() {
  return array('administer registration codes');
}


/**
 * Implementation of hook_menu().
 */
function regcode_menu() {

  $items = array();

  $items['admin/user/regcode'] = array(
    'title'               => 'Registration codes',
    'description'         => 'Manage registration codes.',
    'file'                => 'regcode.admin.php',
    'page callback'       => 'regcode_admin_list',
    'access arguments'    => array('administer registration codes'),
  );

  $items['admin/user/regcode/list'] = array(
    'title'               => 'List',
    'description'         => 'List of registration codes',
    'type'                => MENU_DEFAULT_LOCAL_TASK,
    'weight'              => 10,
  );

  $items['admin/user/regcode/create'] = array(
    'title'               => 'Create',
    'description'         => 'Create a registration code',
    'type'                => MENU_LOCAL_TASK,
    'page callback'       => 'drupal_get_form',
    'page arguments'      => array('regcode_admin_create'),
    'access arguments'    => array('administer registration codes'),
    'file'                => 'regcode.admin.php',
    'weight'              => 20,
  );

  $items['admin/user/regcode/manage'] = array(
    'title'               => 'Manage',
    'description'         => 'Manage the registration code database',
    'type'                => MENU_LOCAL_TASK,
    'page callback'       => 'drupal_get_form',
    'page arguments'      => array('regcode_admin_manage'),
    'access arguments'    => array('administer registration codes'),
    'file'                => 'regcode.admin.php',
    'weight'              => 30,
  );

  $items['admin/user/regcode/settings'] = array(
    'title'               => 'Settings',
    'description'         => 'Settings for registration code functionality.',
    'type'                => MENU_LOCAL_TASK,
    'access arguments'    => array('administer registration codes'),
    'page callback'       => 'drupal_get_form',
    'page arguments'      => array('regcode_admin_settings'),
    'file'                => 'regcode.admin.php',
    'weight'              => 40,
  );

  return $items;
}


/**
 * Implementation of hook_user().
 */
function regcode_user($op, &$edit, &$account, $category = NULL) {
  $code_optional = variable_get('regcode_optional', FALSE);

  switch ($op) {
    case 'register':
      $form['regcode'] = array(
        '#type'        => 'fieldset',
        '#title'       => variable_get('regcode_fieldset_title', t('Registration Code')),
      );

      $form['regcode']['regcode_code'] = array(
        '#type'        => 'textfield',
        '#title'       => variable_get('regcode_field_title', t('Registration Code')),
        '#description' => variable_get('regcode_field_description', t('Please enter your registration code.')),
        '#required'    => !($code_optional || user_access('administer users')),
      );

      // Capture the code from the url and inject it into the registration form
      if (isset($_GET['regcode'])) {
        $form['regcode']['regcode_code']['#value']       = check_plain($_GET['regcode']);
        $form['regcode']['regcode_code']['#description'] = NULL;
        $form['regcode']['regcode_code']['#disabled']    = TRUE;
      }
      return $form;
      break;

    case 'validate':
      if ($category === 'account' && !empty($edit['regcode_code'])) {
        module_invoke_all('regcode_validate', $edit, $account);
        $code = regcode_use($edit['regcode_code']);
        if (!is_object($code)) {
          form_set_error('regcode_code', regcode_errormsg($code));
          watchdog('regcode', 'User entered invalid registration code (@code)',
            array('@code' => $edit['regcode_code']),
            WATCHDOG_WARNING);
        }
      }
      break;

    case 'insert':
      regcode_use_helper($edit, $account);
      break;
  }
}


/**
 * Implementation of hook_views_api().
 */
function regcode_views_api() {
  return array('api' => 2.0);
}


/**
 * Implementation of hook_views_bulk_operations_object_info().
 */
function regcode_views_bulk_operations_object_info() {
  return array(
    'regcode' => array(
      'type'       => 'regcode',
      'base_table' => 'regcode',
      'load'       => 'regcode_load',
      'title'      => 'code',
    ),
  );
}


/**
 * Implementation of hook_action_info().
 */
function regcode_action_info() {

  return array(
    'regcode_activate_action' => array(
      'type'         => 'regcode',
      'description'  => t('Activate codes'),
      'configurable' => FALSE,
      'hooks'        => array('any' => TRUE),
    ),
    'regcode_deactivate_action' => array(
      'type'         => 'regcode',
      'description'  => t('Deactive codes'),
      'configurable' => FALSE,
      'hooks'        => array('any' => TRUE),
    ),
    'regcode_delete_action' => array(
      'type'         => 'regcode',
      'description'  => t('Delete codes'),
      'configurable' => FALSE,
      'hooks'        => array('any' => TRUE),
    ),
    'regcode_tag_action' => array(
      'type'         => 'regcode',
      'description'  => t('Tag codes'),
      'configurable' => TRUE,
      'hooks'        => array('any' => TRUE),
    ),
  );
}


/**
 * Get the exposed regcode fields
 *
 * @return array List of fields and their descriptions
 */
function regcode_get_fields() {

  // Core exposed fields
  $fields = array(
    'begins' => array(
      'description' => t('When code should be active from'),
      'title'       => t('Begins'),
    ),
    'expires' => array(
      'description' => t('When code should expire'),
      'title'       => t('Expires'),
    ),
    'code' => array(
      'description' => t('The registration code'),
      'title'       => t('Code'),
    ),
    'is_active' => array(
      'description' => t('Whether the code is active'),
      'title'       => t('Enabled'),
    ),
    'maxuses' => array(
      'description' => t('Maximum times the code can be used'),
      'title'       => t('Max'),
    ),
    'uses' => array(
      'description' => t('Number of times the code has been used'),
      'title'       => t('Uses'),
    ),
  );

  // Load contributed fields
  $contrib = module_invoke_all('regcode_fields');
  if (is_array($contrib)) {
    $fields += $contrib;
  }

  return $fields;
}


/**
 * Regcode version of module_invoke().
 *
 * We can't use module_invoke because we want to pass by reference
 */
function regcode_module_invoke(&$regcode) {
  foreach (module_implements('regcode_load') as $module) {
    $hook = $module . '_regcode_load';
    $hook($regcode);
  }
}


/**
 * Return text message requested by given identifier/constant
 *
 * @param $code The error message code
 * @return The text of the message.
 */
function regcode_errormsg($err) {
  $messages = array(
    REGCODE_VALIDITY_NOTEXISTING  => t('Registration code does not exist'),
    REGCODE_VALIDITY_NOTAVAILABLE => t('Registration code is not available'),
    REGCODE_VALIDITY_TAKEN        => t('Registration code has already been used'),
    REGCODE_VALIDITY_EXPIRED      => t('Registration code has expired'),
  );

  $msg = FALSE;
  if (isset($messages[$err])) {
    $msg = $messages[$err];
  }

  return $msg;
}


/**
 * Load a registration code
 *
 * @param $code mixed The integer rid or a keyed search array
 * @param object|bool The regcode object or FALSE if the code does not exist
 */
function regcode_load($code) {

  // Check what we're looking for
  if (is_numeric($code)) {
    $cond  = 'rid = %d';
    $param = $code;
  }
  elseif (is_array($code) && !empty($code['code'])) {
    $cond  = "code = '%s'";
    $param = $code['code'];
  }
  else {
    return FALSE;
  }

  // Load the code
  $res = db_query('SELECT * FROM {regcode} WHERE '.$cond.' LIMIT 1', $param);
  $regcode = db_fetch_object($res);

  // Sanity check
  if (!$regcode) {
    return FALSE;
  }

  // Load the terms
  $regcode->tags = array();
  $res = db_query('SELECT term_data.tid, term_data.name
                   FROM {regcode_term} AS regcode_term
                   JOIN {term_data} AS term_data
                   ON (regcode_term.tid = term_data.tid)
                   WHERE regcode_term.rid = %d', $regcode->rid);
  while ($row = db_fetch_array($res)) {
    $regcode->tags[$row['tid']] = $row['name'];
  }

  // Allow modules to add properties
  regcode_module_invoke($regcode);

  return $regcode;
}


/**
 * Validate the use of a code, or use the code and attribute it to a user and call the hooks.
 *
 * This is a helper function which wraps around the API call (regcode_use) to automate the following:
 * - Call the regcode_used hooks
 * - Notify the rules module
 * - Update the $edit variable for hook_user
 * -
 */
function regcode_use_helper(&$edit, &$account) {

  // If there's no code provided we have nothing to do
  if (empty($edit['regcode_code'])) {
    return;
  }

  // Use the code
  $code = regcode_use($edit['regcode_code'], $account->uid);
  watchdog('regcode', 'The registration code %code was used by !user',
    array('%code' => $edit['regcode_code'], '!user' => l($account->name, 'user/' . $account->uid)));

  // Trigger the regcode_used hook
  foreach (module_implements('regcode_used') as $module) {
    $hook = $module . '_regcode_used';
    $hook($edit, $account, $code);
  }

  // Notify rules module
  if (is_object($code) && module_exists('rules')) {
    rules_invoke_event('regcode_used', $account, $code);
  }

  // Update the edit variable (nothing to save here)
  $edit['regcode_code'] = NULL;

  return $code;
}


/**
 * Validate the use of a code, or use the code and attribute it to a user.
 *
 * This is a raw API method for low level usage. It does not call the regcode_used hook,
 * or interact with the user account or the rules module.
 *
 * See the regcode_use_helper function.
 *
 * @param $code string The registration code
 * @param $account_id Optional user id to assign the given code to
 * @return An error code, or TRUE if the code was assigned successfully.
 */
function regcode_use($regcode, $account_id = FALSE) {

  // Load the code
  $code = regcode_load(array('code' => trim($regcode)));

  // Check validity
  if ($code === FALSE) {
    return REGCODE_VALIDITY_NOTEXISTING;
  }

  if ($code->uses >= $code->maxuses && $code->maxuses !== '0') {
    return REGCODE_VALIDITY_TAKEN;
  }

  if (!$code->is_active) {
    return REGCODE_VALIDITY_NOTAVAILABLE;
  }

  if (!empty($code->begins) && $code->begins > time()) {
    return REGCODE_VALIDITY_NOTAVAILABLE;
  }

  if (!empty($code->expires) && $code->expires < time()) {
    return REGCODE_VALIDITY_EXPIRED;
  }

  // Use the code if an account has been provided
  if ($account_id) {

    // Mark the code inactive if it's used up
    $active = 1;
    if ($code->maxuses != 0 && $code->uses + 1 >= $code->maxuses) {
      $active = 0;
    }

    // Use the code
    db_query("UPDATE {regcode} SET uses=uses+1, lastused=%d, uid=%d, is_active=%d WHERE rid=%d",
      time(),
      $account_id,
      $active,
      $code->rid);
  }

  return $code;
}


/**
 * Save given code array to a record in the db
 *
 * @todo Remove the $terms parameter and put it in the object
 * @param $code object A code object (required fields are code,
 * @param $terms array An array of terms to associate this tag with
 * @param $action int Action to perform when saving the code:
 * @return bool TRUE if the code was saved
 */
function regcode_save($code, $terms = array(), $action = REGCODE_MODE_REPLACE) {
  // Sanity check
  if (empty($code) || empty($code->code)) {
    return FALSE;
  }

  // Insert mode
  if ($action == REGCODE_MODE_REPLACE) {
    db_query("DELETE FROM {regcode} WHERE code = '%s'", $code->code);
  }

  // Insert
  $sql = "INSERT INTO {regcode} (created,begins,expires,code,is_active,maxuses)
          VALUES (%d, %s, %s, '%s', %d, %s)";
  $result = db_query($sql,
    time(),
    empty($code->begins)     ? 'NULL' : (int) $code->begins,
    empty($code->expires)    ? 'NULL' : (int) $code->expires,
    check_plain($code->code),
    isset($code->is_active)  ? $code->is_active : 1,
    isset($code->maxuses)    ? (int) $code->maxuses : 1
  );

  // Add tags
  if (count($terms)) {
    $rid = db_last_insert_id('regcode', 'rid');
    foreach ($terms as $term) {
      db_query('INSERT INTO {regcode_term} (rid, tid) VALUES (%d, %d)',
        $rid,
        $term);
    }
  }

  return $result;
}


/**
 * Delete regcode codes
 *
 * @param $op int The action to perform
 */
function regcode_clean($op) {
  $res = FALSE;

  switch ($op) {
    case REGCODE_CLEAN_TRUNCATE:
      $res = db_query('TRUNCATE {regcode}');
      $res = db_query('TRUNCATE {regcode_term}');
      break;

    case REGCODE_CLEAN_EXPIRED:
      $res = db_query('DELETE FROM {regcode} WHERE expires < %d', time());
      break;

    case REGCODE_CLEAN_INACTIVE:
      $res = db_query('DELETE FROM {regcode} WHERE is_active = 0');
      break;
  }

  return $res;
}


/**
 * Generate a code
 */
function regcode_generate($length, $output, $case) {
  static $seeded = FALSE;

  // Possible seeds
  $outputs['alpha']    = 'abcdefghijklmnopqrstuvwqyz';
  $outputs['numeric']  = '0123456789';
  $outputs['alphanum'] = 'abcdefghijklmnopqrstuvwqyz0123456789';
  $outputs['hexadec']  = '0123456789abcdef';

  // Choose seed
  if (isset($outputs[$output])) {
    $output = $outputs[$output];
  }

  // Seed generator (only do this once per invocation)
  if (!$seeded) {
    list($usec, $sec) = explode(' ', microtime());
    $seed = (float) $sec + ((float) $usec * 100000);
    mt_srand($seed);
    $seeded = TRUE;
  }

  // Generate
  $str = '';
  $output_count = strlen($output);
  for ($i = 0; $length > $i; $i++) {
    $str .= $output{mt_rand(0, $output_count - 1)};
  }

  if ($case) {
    $str = strtoupper($str);
  }

  return $str;
}


/**
 * Regcode delete action.
 */
function regcode_delete_action(&$object, $context = array()) {
  db_query('DELETE FROM {regcode} WHERE rid=%d', $object->rid);
}


/**
 * Regcode activate action.
 */
function regcode_activate_action(&$object, $context = array()) {
  db_query('UPDATE {regcode} SET is_active=1 WHERE rid=%d', $object->rid);
}


/**
 * Regcode deactivate action.
 */
function regcode_deactivate_action(&$object, $context = array()) {
  db_query('UPDATE {regcode} SET is_active=0 WHERE rid=%d', $object->rid);
}


/**
 * Regcode tag action.
 */
function regcode_tag_action(&$object, $context = array()) {

  // Apply terms
  foreach ($context['apply_terms'] as $term) {
    db_query('REPLACE INTO {regcode_term} (rid, tid) VALUES (%d, %d)',
      $object->rid,
      $term);
  }

  // Remove terms
  foreach ($context['remove_terms'] as $term) {
    db_query('DELETE FROM {regcode_term} WHERE rid=%d AND tid=%d',
      $object->rid,
      $term);
  }
}


/**
 * Form for tag_action
 */
function regcode_tag_action_form() {
  $form = array();

  $form['regcode_apply_terms'] = array(
    '#type'        => 'checkboxes',
    '#title'       => t('Apply tags'),
    '#description' => t('Select tags to be applied to the selected codes.'),
    '#options'     => regcode_get_vocab_terms(),
  );

  $form['regcode_remove_terms'] = array(
    '#type'        => 'checkboxes',
    '#title'       => t('Remove tags'),
    '#description' => t('Select tags to be remove to the selected codes.'),
    '#options'     => regcode_get_vocab_terms(),
  );

  $vid  = variable_get('regcode_vocabulary', 1);
  $text = t('You can <a href="!url">create tags</a> through the taxonomy module.',
    array('!url' => url('admin/content/taxonomy/'.$vid.'/add/term')));
  $form['regcode_taxonomy'] = array(
    '#value'       => '<p>' . $text . '</p>',
  );

  return $form;
}


/**
 * Submit handler for tag_action
 */
function regcode_tag_action_submit($form, $form_state) {
  return array(
    'apply_terms'  => array_filter($form_state['values']['regcode_apply_terms']),
    'remove_terms' => array_filter($form_state['values']['regcode_remove_terms'])
  );
}


/**
 * Get a list of terms
 */
function regcode_get_vocab_terms() {
  $tree  = taxonomy_get_tree(variable_get('regcode_vocabulary', 1));
  $terms = array();
  foreach ($tree as $term) {
    $terms[$term->tid] = $term->name;
  }
  return $terms;
}
