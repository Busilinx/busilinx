<?php
// $Id: media_bliptv.module,v 1.1.2.2 2011/02/18 17:16:07 aaron Exp $

/**
 *  @file media_bliptv/media_bliptv.module
 *  Embedded Video Field provider file for BlipTV.com.
 */

/* ***************************************** */
/* INCLUDES                                  */
/* ***************************************** */

// A registry of variable_get defaults.
include_once('includes/media_bliptv.variables.inc');

/**
 * Implementation of hook_menu().
 */
function media_bliptv_menu() {
  return array(
    'admin/settings/media_bliptv' => array(
      'title' => 'Media: BlipTV',
      'description' => 'Administer the Media: BlipTV module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('media_bliptv_settings'),
      'access arguments' => array('administer media bliptv'),
      'file' => 'includes/media_bliptv.admin.inc',
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function media_bliptv_theme($existing, $type, $theme, $path) {
  return array(
    'media_bliptv' => array(
      'arguments' => array('variables' => array()),
      'file' => 'media_bliptv.theme.inc',
      'path' => $path .'/themes',
      'template' => 'media-bliptv',
    ),
    'media_bliptv_flash_embed' => array(
      'arguments' => array('variables' => array()),
      'file' => 'media_bliptv.theme.inc',
      'path' => $path .'/themes',
      'template' => 'media-bliptv-flash-embed',
    ),
    'media_bliptv_flash_object' => array(
      'arguments' => array('variables' => array()),
      'file' => 'media_bliptv.theme.inc',
      'path' => $path .'/themes',
      'template' => 'media-bliptv-flash-object',
    ),
  );
}

/**
 * Implementation of hook_emfield_providers().
 */
function media_bliptv_emfield_providers($module, $provider = NULL) {
  // We know this module only includes the main provider file, avoid needless
  // PHP warnings.
  if ($module == 'emvideo' && (!isset($provider) || ($provider == 'bliptv'))) {
    static $path;
    // Cache the result for later.
    if (!isset($path)) {
      $found = drupal_system_listing("$provider\.inc$", drupal_get_path('module', 'media_bliptv') ."/providers/$module", 'name', 0);
      if (is_array($found) && !empty($found)) {
        $path = $found;
      }
    }
    return $path;
  }
}

/**
 * Implementation of media_mover hook
 * @param $op is the operator to return
 * @param $action is which action is being called
 * @param $verb is the verb being run
 * @param $configuration is the specific configuration saved for the action for this configuration
 * @param $file is the file in use
 * @param $job is the full configuration data currently running
 */
// function media_bliptv_media_mover($op = NULL, $action = NULL, $configuration = NULL, &$file=array(), $job = NULL, $nid = NULL) {
// //   switch ($op) {
// //     case 'name':
// //       return t('Media: BlipTV');
// //       break;
// //
// //     case 'actions':
// //       return array(
// //         'process' => array(
// //           1 => t('Upload video to BlipTV.'),
// //         ),
// //         'storage' => array(
// //           2 => t('Upload video to BlipTV.'),
// //         ),
// //       );
// //       break;
// //
// //     case 'process':
// //     case 'storage':
// //       module_load_include('inc', 'media_bliptv', 'includes/media_bliptv.media_mover');
// //       return media_bliptv_upload_video($file, $configuration);
// //       break;
// //
// //     case 'config':
// //       switch ($action) {
// //         case '1':
// //         case '2':
// //           module_load_include('inc', 'media_bliptv', 'includes/media_bliptv.media_mover');
// //           return media_bliptv_config($configuration);
// //       }
// //       break;
// //   }
// }

/**
 * Return the direct URL to this video.
 *
 * @param string $video_id
 *  The BlipTV video id.
 *
 * @return string
 *  The direct URL to the video in question.
 */
function media_bliptv_video_url($video_id) {
  return url('http://blip.tv/file/'. $video_id);
}

function media_bliptv_metadata($video_id) {
  $data = array();

  // we added new data fields to keep from having to reload the api/rss
  // because the data is only stored on update/insert, however, we have to know which data type we're using
  // this will just be an integer, increased when we make a change to data
  $data['emvideo_bliptv_data_version'] = $data['emvideo_data_version'] = MEDIA_BLIPTV_DATA_VERSION;

  // use the page id, since we'll have that in most cases (except in embed pastes, which gets parsed during extraction)
  // we use this to get an rss feed w/ all the info for the video. interesting reading ;)
  // some of our data we'll get from the api, like available files
  $rss = emvideo_bliptv_request($video_id, TRUE, 'rss');
  $api = emvideo_bliptv_request($video_id, TRUE, 'api');

  // special handling for show/feature pages
  // TODO: this is disabled for now.
//   if (empty($rss) && empty($api) && preg_match('@http\://([^\.]+)\.blip\.tv/@i', $item['embed'], $matches)) {
//     $show_rss = emvideo_bliptv_request($item['value'], TRUE, 'rss', TRUE);
//     $data['thumbnail']['url'] = $rss['IMAGE']['URL'][0];
//     $data['flv'] = array();
//     $data['showpage'] = "http://{$item['value']}.blip.tv/";
//     $data['is_show'] = TRUE;
//     return $data;
//   }

  $data['is_show'] = FALSE;

  // get our thumbnail url
  $data['thumbnail']['url'] = $rss['ITEM']['MEDIA:THUMBNAIL'][1]['URL'];
  // this gets sent to the player
  foreach ((array)$api['MEDIA']['LINK'] as $x => $link) {
    $x--;
    $video_type = '';
    switch ($link['TYPE']) {
      case 'video/x-flv':
        $video_type = 'flv';
        break;
      case 'video/x-m4v':
        $video_type = 'm4v';
        break;
      case 'video/quicktime':
        $video_type = 'mov';
        break;
    }
    if ($video_type) {
      $video_info = array();
      $video_info['url'] = $link['HREF'];
      $video_info['width'] = $api['MEDIA']['WIDTH'][$x];
      $video_info['height'] = $api['MEDIA']['HEIGHT'][$x];
      $video_info['duration'] = $api['MEDIA']['DURATION'][$x];
      $video_info['size'] = $api['MEDIA']['SIZE'][$x];
      $video_info['mime'] = $link['TYPE'];
      $video_info['embed_code'] = $rss['ITEM']['BLIP:EMBEDLOOKUP'];

      // we only store the last video of a particular type, for instance if two roles use .mov
      $data[$video_type] = $video_info;

      // however, we store the whole thing under role, so the information is still saved
      // but our arrays may be out of synch...
      $y = $x + 1;
      if ($api['MEDIA']['ROLE'][$y]) {
        $data[$video_type]['role'] = $api['MEDIA']['ROLE'][$y];
        $data[$api['MEDIA']['ROLE'][$y]] = $video_info;
        $data[$api['MEDIA']['ROLE'][$y]]['role'] = $api['MEDIA']['ROLE'][$y];
      }
    }
  }
  if (!$data['flv']) {
    $data['flv'] = array();
  }
  if (!$data['flv']['url']) {
    $data['flv']['url'] = $rss['ITEM']['ENCLOSURE'][1]['URL'];
  }
  $data['title'] = $api['en']['TITLE'][0] ? $api['en']['TITLE'][0] : $rss['2.0']['CHANNEL']['TITLE'][0];
  $data['description'] = $api['en']['DESCRIPTION'][0] ? $api['en']['DESCRIPTION'][0] : $rss['ITEM']['BLIP:PUREDESCRIPTION'][0];
  $data['blip_user']['uid'] = $api['CREATEDBY']['UID'][0] ? $api['CREATEDBY']['UID'][0] : $rss['ITEM']['BLIP:USERID'][0];
  $data['blip_user']['username'] = $api['CREATEDBY']['LOGIN'][0] ? $api['CREATEDBY']['LOGIN'][0] : $rss['ITEM']['BLIP:USER'][0];
  $data['blip_user']['url'] = $api['CREATEDBY']['LINKS']['LINK'][1] ? $api['CREATEDBY']['LINKS']['LINK'][1] : 'http://blip.tv/users/view/'. $data['blip_user']['username'];

  $data['showpage'] = $rss['ITEM']['BLIP:SHOWPAGE'][0];
  $data['embed_code'] = $rss['ITEM']['BLIP:EMBEDLOOKUP'];

  // This is the code actually used by the player, even though it's different
  // than for the page.
  if ($rss['ITEM']['BLIP:POSTS_ID'][0]) {
    $data['post_id'] = $rss['ITEM']['BLIP:POSTS_ID'][0];
  }

  // Grab the RSS feed if we have one.
  foreach ($api['LINKS']['LINK'] as $link) {
    if ($link['TYPE'] == 'application/rss+xml') {
      $data['rss'] = $link['HREF'];
    }
  }

  return $data;
}

/**
 * Validation function for Media: BlipTV's Media Mover configuration form.
 *
 * @see media_bliptv_config().
 */
// function media_bliptv_validate_configuration($element, &$form_state) {
//   if ($values = media_mover_api_extract_form_data($element, $form_state)) {
//     foreach (array('media_bliptv_default_title' => t('Default title'), 'media_bliptv_default_description' => t('Default description')) as $field => $field_name) {
//       if (empty($values[$field])) {
//         // @TODO: Need to use 1 or 2 as specified by the configuration.
//         form_set_error('storage--media_bliptv--1--'. $field, t('%field field is required.', array('%field' => $field_name)));
//       }
//     }
//   }
// //   if (strlen($values['media_bliptv_default_description']) > media_bliptv_variable_get('description_length')) {
// //     form_set_error('storage--media_bliptv--1--media_bliptv_default_description', t('The default description must be @length characters or less.', array('@length' => media_bliptv_variable_get('description_length'))));
// //   }
// }
