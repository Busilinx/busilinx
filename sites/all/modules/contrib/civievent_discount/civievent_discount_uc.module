<?php

/**
 * Implementation of hook_ca_predicate()
 */
function civievent_discount_uc_ca_predicate() {
  $predicates = array();
  $predicates['civievent_discount_uc_create_order_code'] = array(
    '#title'     => t('Generate and assign a CiviCRM discount code'),
    '#class'   => 'civievent_discount_uc',
    '#status'  => 1,
    '#trigger' => 'uc_checkout_complete',
    '#actions' => array(
        array(
            '#name'         => 'civievent_discount_uc_order_code',
            '#title'        => t('Generate and assign a CiviCRM discount code'),
            '#argument_map' => array('order' => 'order',),
        ),
    ),
  );

  return $predicates;
}

/**
 * Implementation of hook_ca_action()
 */
function civievent_discount_uc_ca_action() {
  $actions = array();
  $actions['civievent_discount_uc_order_code'] = array(
      '#title'     => t('Generate and assign a CiviCRM discount code'),
      '#category'  => t('Order'),
      '#callback'  => 'civievent_discount_uc_action_process_code',
      '#arguments' => array('order' => array('#entity' => 'uc_order', '#title'  => t('Order'),)),
  );

  return $actions;
}

/**
 * Implementation of hook_form_alter()
 */
function civievent_discount_uc_form_membership_discount_node_form_alter(&$form, &$form_state) {
  require_once('civievent_discount.admin.inc');

  $membership_form = civievent_discount_add(&$form_state, NULL, NULL);
  $membership_form['fsa']['#title'] = 'Membership';
  $membership_form['fsa']['code']['#required'] = FALSE;
  $membership_form['fsa']['code']['#type'] = 'markup';
  $membership_form['fsa']['code']['#value'] = 'The code will be generated during checkout.';
  $membership_form['fsa']['memberships'] = $membership_form['fsb']['memberships'];
  $membership_form['fsa']['memberships']['#required'] = TRUE;

  $nid = $form['nid']['#value'];
  if ($nid) {
    $data = db_result(db_query(_sql_get_product(), $nid));
    $data = unserialize($data);
    $membership_form['fsa']['amount']['#default_value'] = $data['amount'];
    $membership_form['fsa']['amount_type']['#default_value'] = $data['amount_type'];
    $membership_form['fsa']['count']['#default_value'] = $data['count'];
    $membership_form['fsa']['expiration']['#default_value'] = $data['expiration'];
    $membership_form['fsa']['memberships']['#default_value'] = $data['memberships'];
  }

  unset($membership_form['fsa']['description']);
  unset($membership_form['fsa']['organizations']);
  unset($membership_form['fsa']['autodiscount']);
  unset($membership_form['fsb']);
  unset($membership_form['submit']);

  $form['base'][] = $membership_form;
}

/**
 * Implementation of hook_nodeapi()
 */
function civievent_discount_uc_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'membership_discount') {
    require_once('civievent_discount.admin.inc');
    switch ($op) {
      case 'insert':
      case 'update':
        $a = array();
        $a['amount'] = $node->amount;
        $a['amount_type'] = $node->amount_type;
        $a['count'] = $node->count;
        $a['expiration'] = $node->expiration;
        $a['memberships'] = $node->memberships;
        if ($op == 'insert') {
          db_query(_sql_set_product(), $node->nid, serialize($a));
        } else {
          db_query(_sql_update_product(), $node->nid, serialize($a));
        }
        break;
    }
  }
}

/**
 * Action callback
 *
 * Generates the discount code and assigns to the organization. Adds the
 * discount code to the order summary page.
 */
function civievent_discount_uc_action_process_code($order) {
  $products = $order->products;
  foreach ($products as $product) {
    $node = node_load($product->nid);
    if ($node->type == 'membership_discount') {
      $data = unserialize(db_result(db_query(_sql_get_product(), $node->nid)));
      require_once('civievent_discount.module');
      require_once('civievent_discount.admin.inc');
      $chars = _get_chars();
      $charslen = _get_chars_len();
      $code = _random_code(_get_chars(), _get_chars_len());
      $organization = $order->billing_company;
      
      // In CiviCRM 3.4, this will only search 'active'.
      // Older versions will find all (trashed).
      $params = array(
          'organization_name' => $organization,
          'contact_type' => 'Organization',
      );
      $results =& civicrm_contact_get(&$params);
      if (empty($results)) {
        $params['dupe_check'] = TRUE;
        $contact =& civicrm_contact_create(&$params);
      } else {
        $contact = array_shift($results);
      }
      
      // create civicrm organization if it doesn't exist
      $result = db_query(_sql_set_code(), $node->title, $data['amount'], $data['amount_type'], serialize(array()), serialize(array()), serialize($data['memberships']), $contact['contact_id'], serialize(array()), $data['expires'], $data['count'], $code);
    
      uc_order_comment_save($order->order_id, 0, t('Your discount code is '). $code, 'order');
    }
  }
}

/**
 * Helper function
 */
function _random_code($chars, $len) {
  $size = strlen($chars);
  for ($i = 0; $i < $len; $i++) {
    $code .= $chars[rand(0, $size - 1)];
  }

  return $code;
}

/**
 * SQL statements
 */
function _sql_set_product() {
  return "INSERT INTO {civievent_discount_uc_product} (nid,sdata) VALUES (%d, '%s')";
}

function _sql_get_product() {
  return "SELECT sdata FROM {civievent_discount_uc_product} WHERE nid = %d";
}

function _sql_update_product() {
  return "UPDATE {civievent_discount_uc_product} SET nid = %d, sdata = '%s'";
}

