<?php
/* $Id: nodewords_nodetype.module,v 1.2.2.8 2009/09/25 14:38:36 hanoii Exp $ */

/**
 * Implementation of hook_form_alter().
 */
function nodewords_nodetype_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['#node_type'])) {
    $form['nodewords_nodetype'] = array(
      '#type' => 'fieldset',
      '#title' => t('Meta tags node type'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['nodewords_nodetype']['nodewords_nodetype_robots'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Default "robots" meta tag'),
      '#options' => array(
      'noindex' => t('NOINDEX'),
      'nofollow' => t('NOFOLLOW'),
      'noarchive' => t('NOARCHIVE'),
      'noopd' => t('NOOPD'),
      'nosnippet' => t('NOSNIPPET'),
      'noydir' => t('NOYDIR'),
      ),
      '#checkall' => TRUE,
      '#default_value' => variable_get('nodewords_nodetype_robots_'. $form['#node_type']->type, array()),
      '#description' => t('The ROBOTS meta tag offers a simple mechanism to indicate to web robots and crawlers whether the page should be indexed (INDEX or NOINDEX) and whether links on the page should be followed (FOLLOW or NOFOLLOW).'),
    );
    $form['nodewords_nodetype']['nodewords_nodetype_keywords'] = array(
      '#type' => 'textfield',
      '#title' => t('Default "keywords" meta tag'),
      '#default_value' => variable_get('nodewords_nodetype_keywords_'. $form['#node_type']->type, ''),
      '#size' => 60,
      '#maxlength' => variable_get('nodewords_max_size', 255),
      '#description' => t('Tokens are supported. This keywords will be appended after the global keywords and before the page kewords. Enter a comma separated list of keywords for this page. Avoid duplication of words as this will lower your search engine ranking.'),
    );

    $form['nodewords_nodetype']['description'] = array(
      '#type' => 'fieldset',
      '#title' => t('Description'),
      '#collapsible' => TRUE,
    );

    $form['nodewords_nodetype']['description']['nodewords_nodetype_description'] = array(
      '#type' => 'textarea',
      '#title' => t('Default "description" meta tag'),
      '#default_value' => variable_get('nodewords_nodetype_description_'. $form['#node_type']->type, ''),
      '#description' => t('Tokens are supported. Enter a description. Limit your description to about 20 words, with a maximum of %count characters. It should not contain any HTML tags or other formatting.', array('%count' => variable_get('nodewords_max_size', 255))) . (variable_get('basic_metatags_use_teaser', FALSE) ? ' ' . t('When you leave this field empty, the teaser will be used as description.') : ''),
    );

    $form['nodewords_nodetype']['nodewords_nodetype_token'] = array(
      '#type' => 'fieldset',
      '#title' => t('Token replacements'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['nodewords_nodetype']['nodewords_nodetype_token']['help'] = array(
      '#type' => 'markup',
      '#value' => theme('token_help'),
    );

    if (user_access('allow PHP replacements')) {
      $form['nodewords_nodetype']['description']['advanced'] = array(
        '#type' => 'fieldset',
        '#title' => t('Advanced PHP replacement'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['nodewords_nodetype']['description']['advanced']['nodewords_nodetype_desc_php'] = array(
        '#type' => 'textarea',
        '#title' => t('PHP replacement'),
        '#default_value' => variable_get('nodewords_nodetype_desc_php_'. $form['#node_type']->type, ''),
        '#description' => t('Code must be included within %php_tags tags. You can add any php code here to perform a particular replacement on the description meta tag information after token substitution. %description and %php_description are available to be used within this code. %title is the actual description meta tags defined above with any token replacement. Be careful if the title has single or double quotes in it. %php_description is replaced with a PHP code that defines a $description variable that you can use along your eval code with the replaced string (quotes are not a problem here). A good starting poing would be: <code>%code</code>.', array('%php_tags' => '<?php ?>', '%code' => '<?php %php_description return $description; ?>')),
      );
    }
  }
}

/**
 * Implementation of hook_nodewords_tags_alter().
 */
function nodewords_nodetype_nodewords_tags_alter(&$output_tags, $tag_options) {
  if ($tag_options['type'] == 'node') {
    $node = node_load($tag_options['ids'][0]);

    // Keywords
    // keywords are appended to the node\'s and global ones.
    if ( ( $keywords = variable_get('nodewords_nodetype_keywords_'. $node->type, '') ) !== '' ) {
      $meta_keywords = token_replace($keywords, 'node', $node);
      $output_tags['keywords'] .= ($output_tags['keywords'] !== '' ? ',' : '' ) . $meta_keywords;
      $output_tags['keywords'] = nodewords_unique($output_tags['keywords']);
    }

    // Description
    // Don't replace per node meta description
    if ($node->nodewords['description']['value'] !== '' ) {
      if ( ( $description = variable_get('nodewords_nodetype_description_'. $node->type, '') ) !== '' ) {
        $meta_description = token_replace($description, 'node', $node);
      }

      if ( ( $description_php = variable_get('nodewords_nodetype_desc_php_'. $node->type, '') ) !== '' ) {
        $description_php = token_replace($description_php, 'node', $node);
        $variables['%description'] = $meta_description;
        $variables['%php_description'] = '$description = \'' . str_replace('\'', '\\\'', $meta_description) . '\';';
        $meta_description = drupal_eval(strtr($description_php, $variables));
      }

      if ( $meta_description != '' ) {
        $output_tags['description'] = $meta_description;
      }
    }

    // Robots
    // Don't replace per node meta robots
    $node_robots = array();
    if (is_array($node->nodewords['robots']['value'])) {
      $node_robots = array_filter($node->nodewords['robots']['value']);
    }
    if (empty($node_robots) && !$node->nodewords['robots']['use_default']) {
      $robots = variable_get('nodewords_nodetype_robots_'. $node->type, array());
      if (!empty($robots)) {
        $value = array_filter($robots);
        if (!empty($value)) {
          $output_tags['robots'] = implode(', ', $value);
        }
      }
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function nodewords_nodetype_perm() {
  return array('allow PHP replacements');
}
