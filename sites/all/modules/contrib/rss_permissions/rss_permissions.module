<?php
// $Id: rss_permissions.module,v 1.1.2.1 2010/02/02 00:08:18 phpdiva Exp $

/**
 * Implementation of hook_help().
 */
function rss_permissions_help($path, $arg) {
  switch ($path) {
    case 'admin/help#rss_permissions':
      return '<p>' . t('RSS permissions module adds role-based permissions to various RSS feeds on a Drupal site. Go to <a href="@rss_permissions">rss_permissions module</a> section of the Permissions page to set permissions for various feeds per role.', array('@rss_permissions' => url('admin/user/permissions', array('fragment' => 'module-rss_permissions')))) . '</p>'
          . '<p>' . t('You can manage permissions for main site RSS feed, aggregator RSS feeds (if Aggregator module is enabled), main blog RSS feed and user blog RSS feeds (if Blog module is enabled), and taxonomy RSS feeds (if Taxonomy module is enabled).') . '</p>';
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function rss_permissions_perm() {
  $rss_permissions = array('access site RSS feed');

  if (module_exists('taxonomy')) {
    $rss_permissions[] = 'access taxonomy RSS feeds';
  }

  if (module_exists('blog')) {
    $rss_permissions[] = 'access user blog RSS feeds';
    $rss_permissions[] = 'access main blog RSS feed';
  }

  if (module_exists('aggregator')) {
    $rss_permissions[] = 'access aggregator RSS feeds';
  }

  return $rss_permissions;
}

/**
 * Implementation of hook_menu_alter().
 */
function rss_permissions_menu_alter(&$items) {

  // Check permissions for main site RSS feed.
  $items['rss.xml']['access callback'] = 'rss_permissions_menu_access';
  $items['rss.xml']['access arguments'] = array('node');

  // Check permissions for taxonomy RSS feed.
  if (module_exists('taxonomy')) {
    $items['taxonomy/term/%']['access callback'] = 'rss_permissions_menu_access';
    $items['taxonomy/term/%']['access arguments'] = array('taxonomy', 4);
  }

  // Check permissions for blog RSS feeds.
  if (module_exists('blog')) {

    // Blog user feeds.
    $items['blog/%user/feed']['access callback'] = 'rss_permissions_menu_access';
    $items['blog/%user/feed']['access arguments'] = array('blog_user', 1);

    // Main blog feed.
    $items['blog/feed']['access callback'] = 'rss_permissions_menu_access';
    $items['blog/feed']['access arguments'] = array('blog');
  }

  // Check permissions for aggregator RSS feeds.
  if (module_exists('aggregator')) {

    // Aggregator feeds
    $items['aggregator/rss']['access callback'] = 'rss_permissions_menu_access';
    $items['aggregator/rss']['access arguments'] = array('aggregator');

    // OPML (blogroll)
    $items['aggregator/opml']['access callback'] = 'rss_permissions_menu_access';
    $items['aggregator/opml']['access arguments'] = array('aggregator');
  }
}

/**
 * Implementation of hook_theme to override theme_feed_icon().
 */
function rss_permissions_theme($existing, $type, $theme, $path) {
  return array(
    'feed_icon' => array(
      'arguments' => array('url' => NULL, 'title' => NULL),
      'function' => 'theme_rss_permissions_feed_icon',
    ),
  );
}

/**
 * Overriding theme_feed_icon().
 * Check permission to view the feed before displaying the icon.
 */
function theme_rss_permissions_feed_icon($url, $title) {
  if (rss_permissions_feed_url_access($url)) {
    if ($image = theme('image', 'misc/feed.png', t('Syndicate content'), $title)) {
      return '<a href="'. check_url($url) .'" class="feed-icon">'. $image .'</a>';
    }
  }
  return '';
}

/**
 * Check permissions to access menu callbacks.
 */
function rss_permissions_menu_access($module) {
  switch ($module) {

    // Main site RSS feed.
    case 'node':
      return user_access('access content') && user_access('access site RSS feed');
      break;

    // Taxonomy RSS feeds.
    // Taxonomy module uses the same menu callback both for page and feed.
    // Make sure we are on the feed page before overriding the access callback.
    case 'taxonomy':
      if (func_num_args() >= 2 && func_get_arg(1) == 'feed') {
        return user_access('access content') && user_access('access taxonomy RSS feeds');
      }
      else {
        return user_access('access content');
      }
      break;

    // Individual user blog RSS feeds.
    case 'blog_user':
      $account = func_get_arg(1);
      return blog_page_user_access($account) && user_access('access user blog RSS feeds');
      break;

    // Main blog RSS feed.
    case 'blog':
      return user_access('access content') && user_access('access main blog RSS feed');
      break;

    // Aggregator RSS feeds.
    case 'aggregator':
      return user_access('access news feeds') && user_access('access aggregator RSS feeds');
      break;

    // Reasonable default.
    default:
      return user_access('access content');
  }
}

/**
 * This function checks if user has permissions to view a given feed.
 * The logic is slightly different from rss_permissions_menu_access,
 * since we only have the feed URL to work with.
 */
function rss_permissions_feed_url_access($url) {

  // Site's main RSS feed.
  if (url('rss.xml', array('absolute' => TRUE)) == $url) {
    return user_access('access content') && user_access('access site RSS feed');
  }

  // Taxonomy RSS feeds.
  if (preg_match('/^.*taxonomy\/term\/([0-9]+)\/([0-9]+)\/feed$/i', $url, $matches) > 0) {
    return user_access('access content') && user_access('access taxonomy RSS feeds');
  }

  // Individual user blog RSS feeds.
  if (preg_match('/^.*blog\/([0-9]+)\/feed$/i', $url, $matches) > 0) {
    $blog_uid = $matches[1];
    $account = user_load($blog_uid);
    return blog_page_user_access($account) && user_access('access user blog RSS feeds');
  }

  // Main blog RSS feed.
  if (url('blog/feed') == $url) {
    return user_access('access content') && user_access('access main blog RSS feed');
  }

  // Aggregator RSS feeds.
  if (strpos($url, 'aggregator/rss') != FALSE || url('aggregator/opml') == $url) {
    return user_access('access news feeds') && user_access('access aggregator RSS feeds');
  }

  // Just to be safe, fall back to a reasonable default.
  return user_access('access content');
}

/**
 * Implementation of theme_preprocess_page().
 * Use regex to remove RSS link from HEAD, if the user has no permission for that feed.
 */
function rss_permissions_preprocess_page(&$vars) {
  if (preg_match('/<link rel="alternate" type="application\/rss\+xml" title=".*?" href="(.*?)" \/>/', $vars['head'], $matches)) {
	  // $matches[1] is the URL to the feed.
		if (!empty($matches[1]) && !rss_permissions_feed_url_access($matches[1])) {
			$vars['head'] = preg_replace('/<link rel="alternate" type="application\/rss\+xml" title=".*?" href=".*?" \/>/', '', $vars['head']);
		}
	}
}

