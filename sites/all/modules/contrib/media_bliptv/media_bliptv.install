<?php
// $Id: media_bliptv.install,v 1.1.2.3 2011/02/18 17:16:07 aaron Exp $

/**
 * @file media_bliptv/media_bliptv.install
 * This is Media: BlipTV's installation, configuration, and removal file.
 */

/**
 * Implementation of hook_install().
 */
function media_bliptv_install() {
  // Ensure we have the required variable namespace.
  drupal_load('module', 'media_bliptv');

  // Convert variables to the Media: BlipTV variable namespace.
  $ret = array();
  $flag = FALSE;

  $variables = array(
    'emvideo_bliptv_rss_tag' => 'rss_tag',
    'emvideo_bliptv_rss_format' => 'rss_format',
  );

  foreach ($variables as $old_variable => $new_variable) {
    $new_value = media_bliptv_variable_get($new_variable);
    $old_value = variable_get($old_variable, $new_value);

    if (is_array($old_value)) {
      $old_value = array_pop($old_value);
    }

    // Set the variable to the value of the old version of emfield,
    // assuming it hasn't already been overridden, and the old version is not
    // the current default.
    if (($new_value == media_bliptv_variable_default($new_variable)) && ($new_value != $old_value)) {
      media_bliptv_variable_set($new_variable, $old_value);
    }
    variable_del($old_variable);
    $flag = TRUE;
  }

  if ($flag) {
    $ret[] = array('success' => TRUE, 'query' => "Converted old variables to the Media: BlipTV variable namespace.");
  }

  return $ret;
}

/**
 * Implementation of hook_uninstall().
 */
function media_bliptv_uninstall() {
  foreach (media_bliptv_variable_default() as $variable => $value) {
    media_bliptv_variable_del($variable);
  }
  return array(array('success' => TRUE, 'query' => "Deleted all variables in the Media: BlipTV namespace."));
}

function media_bliptv_update_6001() {
  $ret = array();
  drupal_rebuild_theme_registry();
  return $ret;
}

/**
 * Rebuild youtube data to account for not saving raw by default.
 */
function media_bliptv_update_6002() {
  return _media_bliptv_fetch_metadata_batch_set('_media_bliptv_update_fetch_metadata', t('Importing Blip.TV metadata.'), 'Retrieved current Blip.TV metadata for the %field_name field.');
}

/**
 * Set up batch job to retrieve the most recent data from providers.
 *
 * @param $batch_function
 *   The function to run in the batch job.
 * @param $title
 *   The title of the job to display.
 * @param $query_string
 *   The string to display on sucess, escaping for %field_name.
 */
function _media_bliptv_fetch_metadata_batch_set($batch_function, $title = '', $query_string = '') {
  $ret = array();

  // Build a list of fields that need metadata updating.
  $fields = array();
  module_load_install('install', 'content');
  foreach (content_types_install() as $type_name => $type_fields) {
    foreach ($type_fields as $field) {
      if ($field['module'] == 'emvideo') {
        // We only process a given field once.
        $fields[$field['field_name']] = $field;
      }
    }
  }

  // Build a batch that grabs the Blip.TV metadata for each video.
  $batch = array(
    'title' => $title,
    'operations' => array(),
    'file' => drupal_get_path('module', 'media_bliptv') .'/media_bliptv.install',
  );

  foreach ($fields as $field_name => $field) {
    $batch['operations'][] = array($batch_function, array($field));
    $ret[] = array(
      'query' => t($query_string, array('%field_name' => $field['field_name'])),
      'success' => TRUE,
    );
  }
  batch_set($batch);

  return $ret;
}

/**
 * Batch function to retrieve the most recent data from providers.
 *
 * @param $field
 *   The field definition.
 * @param &$context
 *   The context for the batch operations.
 */
function _media_bliptv_update_fetch_metadata($field, &$context) {
  // Setup the sandbox the first time through.
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['field'] = $field;
    $db_info = content_database_info($field);
    $context['sandbox']['db_info'] = $db_info;
    $context['sandbox']['table'] = $db_info['table'];
    $context['sandbox']['col_embed'] = $db_info['columns']['embed']['column'];
    $context['sandbox']['col_value'] = $db_info['columns']['value']['column'];
    $context['sandbox']['col_provider'] = $db_info['columns']['provider']['column'];
    $context['sandbox']['col_data'] = $db_info['columns']['data']['column'];
    $context['sandbox']['col_version'] = $db_info['columns']['version']['column'];
    $context['sandbox']['module'] = $field['module'];
    $context['sandbox']['max'] = db_result(db_query("SELECT COUNT(*) FROM {". $db_info['table'] ."}"));
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_vid'] = 0;
  }

  // Work our way through the field values 50 rows at a time.
  // Note that if PHP times out here, you can set the
  // emfield_install_fix_data_rows variable in settings.php to a lower number.
  // If you get this error, please report it so we can find a better limit
  // to work with; I'm not sure if this value will work in the majority of
  // cases. Thanks, Aaron.
  $limit = variable_get('emfield_install_fix_data_rows', 50);
  $result = db_query_range("SELECT * FROM {{$context['sandbox']['table']}} WHERE vid > %d ORDER BY vid ASC", $context['sandbox']['current_vid'], 0, $limit);

  while ($row = db_fetch_array($result)) {
    // Fetch the duration from the provider.
    $item = array(
      'vid' => $row['vid'],
      'embed' => $row[$context['sandbox']['col_embed']],
      'value' => $row[$context['sandbox']['col_value']],
      'provider' => $row[$context['sandbox']['col_provider']],
      'data' => unserialize($row[$context['sandbox']['col_data']]),
      'version' => $row[$context['sandbox']['col_version']],
    );
    if ($item['provider'] == 'bliptv') {
      if ($item['version'] != MEDIA_BLIPTV_DATA_VERSION) {
        unset($item['data']['raw']);
        // Ensure we keep any emthumb data.
        $item[$context['sandbox']['col_data']] = serialize(array_merge($item['data'], media_bliptv_metadata($item['value'])));
        $item[$context['sandbox']['col_version']] = MEDIA_BLIPTV_DATA_VERSION;
        drupal_write_record($context['sandbox']['table'], $item, array('vid'));
      }
    }

    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_vid'] = $row['vid'];
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  else {
    $context['finished'] = 1;
  }
}
