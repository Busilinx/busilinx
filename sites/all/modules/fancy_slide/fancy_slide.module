<?php
/**
 * @file
 *    Fancy Slide is a configurable, fancy-looking slideshow module.
 */

define('FANCY_SLIDE_TYPE_SINGLE', 0);
define('FANCY_SLIDE_TYPE_NODEQUEUE', 1);

/**
 * Add a slideshow to the database.
 * 
 * @param $slide array
 *    A slideshow array. For the format of this array, see the documentation for
 *    fancy_slide_get.
 * @see fancy_slide_get()
 */
function fancy_slide_add($slide) {
  // If we're adding a new slideshow, we can't have a sid, because this will
  // be automatically assigned by the database.
  if ($slide['sid']) {
    unset($slide['sid']);
  }
  
  drupal_write_record('fancy_slide', $slide);
}

/**
 * Autocomplete callback for the slideshow node selector.
 * 
 * @param $string string
 *    The part of the node title to autocomplete.
 */
function fancy_slide_autocomplete_nid($string) {
  $matches = array();
  $result = db_query_range(
    "SELECT nid, title FROM {node} WHERE LOWER(title) LIKE LOWER('%%%s%%')",
    $string,
    0, 10
  );
  
  while ($row = db_fetch_object($result)) {
    $matches[$row->title] = check_plain($row->title);
  }
  
  print drupal_to_js($matches);
  exit();
}

/**
 * Implementation of hook_block().
 */
function fancy_slide_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array();
      $slideshows = fancy_slide_get_all();
      
      // Generate a separate block for each slideshow so users can choose where
      // they are placed.
      foreach ($slideshows as $sid => $slideshow) {
        $blocks[$sid]['info'] = t('Fancy Slide: ' . $slideshow['name']);
      }

      return $blocks;
      
    case 'view':
      $slideshow = fancy_slide_get($delta);
      
      // Deal with a case where the delta does not refer to a valid slideshow.
      if (!is_array($slideshow)) {
        return array(
          'subject' => t('Fancy Slide slideshow not found'),
          'content' => t('The Fancy Slide slideshow with ID %id was not found.', array('%id' => $delta)),
        );
      }
      
      $block = array(
        'subject' => $slideshow['name'],
        'content' => theme('fancy_slide', $delta),
      );
      
      return $block;
  }
}

/**
 * Delete the specified slideshow.
 * 
 * @param $sid int
 *    The ID of the slideshow.
 */
function fancy_slide_delete($sid) {
  db_query("DELETE FROM {fancy_slide} WHERE sid = %d", $sid);
  drupal_goto('admin/content/fancy-slide/view');
}

/**
 * The form for adding or editing a slideshow.
 * 
 * @param $sid int
 *    The slideshow ID to edit. If not specified, a new slideshow will be
 *    created.
 */
function fancy_slide_edit_form($form_state, $sid = 0) {
  drupal_add_js(drupal_get_path('module', 'fancy_slide') . '/js/fancy_slide.admin.js');
  drupal_add_css(drupal_get_path('module', 'fancy_slide') . '/css/fancy_slide.admin.css');
  
  if ($sid) {
    $slideshow = fancy_slide_get($sid);
  }
  
  $form = array();
  
  $form['#redirect'] = 'admin/content/fancy-slide/view';
  $form['sid'] = array(
    '#type'           => 'hidden',
    '#value'          => $sid ? $sid : '0',
  );
  $form['slideshow_name'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Slideshow name'),
    '#description'    => t('Enter a name for the slideshow.'),
    '#required'       => TRUE,
    '#maxlength'      => 128,
    '#default_value'  => $slideshow['name'],
  );
  $form['dimensions'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Dimensions'),
    '#description'    => t('Enter a width and height in pixels, such as 860x352. Width must be between 64 and 2048. Height must be between 27 and 2048.'),
    '#maxlength'      => 9,
    '#default_value'  => $slideshow['width'] ? $slideshow['width'] . 'x' . $slideshow['height'] : '',
  );
  $form['type'] = array(
    '#type'           => 'radios',
    '#title'          => t('Type of slideshow'),
    '#description'    => t('Choose the type of slideshow. This will determine where the images are drawn from.'),
    '#required'       => TRUE,
    '#options'        => fancy_slide_options_types(),
    '#default_value'  => $slideshow['type'],
  );
  $form['nid'] = array(
    '#type'               => 'textfield',
    '#title'              => t('Node'),
    '#description'        => t('The node that contains all the images for the slideshow. Begin typing the node\'s title to autocomplete it.'),
    '#autocomplete_path'  => 'fancy-slide/autocomplete-nid',
    '#default_value'      => $slideshow['nid'] ? $slideshow['node_title'] : '',
  );
  if (module_exists('nodequeue')) {
    $form['nodequeue'] = array(
      '#type'           => 'select',
      '#title'          => t('Nodequeue'),
      '#description'    => t('Select the nodequeue that contains the nodes whose images you want to display.'),
      '#options'        => fancy_slide_options_nodequeues(),
      '#default_value'  => $slideshow['nodequeue'],
    );
  }
  $form['animation'] = array(
    '#type'           => 'radios',
    '#title'          => t('Animation'),
    '#description'    => t('Choose the transition betwen slides in the slideshow. Note that this might still be used even if you set the duration to 0, because a user can still change slides manually.'),
    '#required'       => TRUE,
    '#options'        => array(
      'fade'  => t('Fade'),
      'slide' => t('Slide'),
    ),
    '#default_value'  => $slideshow['animation'] ? $slideshow['animation'] : 'fade',
  );
  $form['slidefield'] = array(
    '#type'           => 'select',
    '#title'          => t('Slideshow field'),
    '#description'    => t('The field that contains the image. Bear in mind that this is a list of all fields, and not all fields will be on each node type, so you must make sure that you have chosen a field that appears on the type of node you\'re using, otherwise nothing will show up in the slideshow. If you are using a single node type slideshow, this field is expected to contain multiple images. Otherwise, if the field contains multiple images, only the first will be used.'),
    '#options'        => fancy_slide_options_fields(),
    '#default_value'  => $slideshow['field'],
  );
  $form['delay'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Delay between slides'),
    '#description'    => t('The time in seconds that each slide should be displayed before advancing to the next. Set this to 0 to prevent the slides from advancing automatically.'),
    '#maxlength'      => 3,
    '#size'           => 5,
    '#required'       => TRUE,
    '#default_value'  => $slideshow['delay'],
  );
  $form['transition_speed'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Transition speed'),
    '#description'    => t('The time in milliseconds that the animation takes to transit from one slide to the next. 1000 is equal to one second.'),
    '#maxlength'      => 5,
    '#size'           => 7,
    '#required'       => TRUE,
    '#default_value'  => $slideshow['transition_speed'] ? $slideshow['transition_speed'] : 1000,
  );
  if (module_exists('imagecache')) {
    $form['preset'] = array(
      '#type'           => 'select',
      '#title'          => t('Imagecache preset'),
      '#description'    => t('The imagecache preset used to automatically resize the slides in this slideshow. The preset should contain a scale operation (such as scale and crop) that ensures the width and height of the image matches the width and height of the slideshow, or some of the image might be obscured.'),
      '#options'        => fancy_slide_options_presets(),
      '#default_value'  => $slideshow['preset'],
    );
  }
  $form['continuous'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Continuous'),
    '#description'    => t('If checked, the slideshow will return to the first slide once the last slide is reached. If not checked, the slideshow will end once the last slide has been reached.'),
    '#default_value'  => $slideshow['continuous'],
  );
  
  $form['vertical'] = array(
    '#type'           => 'radios',
    '#title'          => t('Slideshow orientation'),
    '#description'    => t('If horizontal, the slides will animate horizontally as though they are side by side. If vertical, the slides will animate vertically as though they are on top of one another.'),
    '#required'       => TRUE,
    '#options'        => array('0' => t('Horizontal'), '1' => t('Vertical')),
    '#default_value'  => $slideshow['vertical'],
  );
  $form['show_controls'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Show controls'),
    '#description'    => t('If checked, the control strip will appear, showing the image alternate text (description) and a set of thumbnails allowing the manual selection of slides.'),
    '#default_value'  => $slideshow['show_controls'],
  );
  $form['slide_controls'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Slide controls'),
    '#description'    => t('If checked, the control strip will slide in when the mouse is moved over the slideshow, and slide out again when the mouse is moved away. If unchecked, the controls will always be visible. Note that if the controls are turned off altogether, this option will have no effect.'),
    '#default_value'  => $slideshow['slide_controls'],
  );
  $form['submit'] = array(
    '#type'   => 'submit',
    '#value'  => $sid ? t('Update') : t('Add'),
  );
  
  return $form;
}

/**
 * Validate handler for fancy_slide_edit_form().
 */
function fancy_slide_edit_form_validate($form_id, &$form_state) {
  $form_state['values']['slideshow_name'] = check_plain($form_state['values']['slideshow_name']);
  
  if (!preg_match('/[0-9]{1,4}x[0-9]{1,4}/', $form_state['values']['dimensions'])) {
    form_set_error('dimensions', t('Dimensions must be in the form 640x480 (numbers, followed by the x character, followed by more numbers.'));
  }
  
  $showtype = $form_state['values']['type'];
  
  // If the slideshow is a single type, make sure that the node exists.
  if ($showtype == FANCY_SLIDE_TYPE_SINGLE) {
    $nid = db_result(db_query(
      "SELECT nid FROM {node} WHERE title = '%s'", $form_state['values']['nid']
    ));
    
    if (!$nid) {
      form_set_error('nid', t('The node %node was not found.', array('%node', $form_state['values']['nid'])));
    }
  }
  // If the slideshow is a nodequeue type, make sure a nodequeue is selected and
  // actually exists.
  else if ($showtype == FANCY_SLIDE_TYPE_NODEQUEUE) {
    $sqid_ok = TRUE;    
    $sqid = $form_state['values']['nodequeue'];
    
    if (!$sqid) {
      $sqid_ok = FALSE;
    }
    else {
      // Look up the nodequeue to make sure it exists.
      $queue = db_result(db_query(
        "SELECT title FROM {nodequeue_subqueue} WHERE sqid = %d", $sqid
      ));
      
      if (!$queue) {
        $sqid_ok = FALSE;
      }
    }
    
    if (!$sqid_ok) {
      form_set_error('nodequeue', t('You must select a valid nodequeue. If there are no nodequeues, you will need to !addlink.', array('!addlink', l(t('add one first'), 'admin/content/nodequeue/add/nodequeue'))));
    }
  }
  
  // Make sure that the selected field actually exists.
  if (!in_array($form_state['values']['slidefield'], array_keys(content_fields()))) {
    form_set_error('slidefield', t('The field %field does not exist.', array('%title', $form_state['values']['slidefield'])));
  }
  
  // Make sure the slideshow delay is numeric and greater than 0.
  $delay = $form_state['values']['delay'];
  
  if (!is_numeric($delay) || $delay < 0 || $delay > 999) {
    form_set_error('delay', t('Please enter a number between 0 and 999.'));
  }
  
  // Make sure the transition speed is numeric and greater than 0.
  $speed = $form_state['values']['transition_speed'];
  
  if (!is_numeric($speed) || $speed < 0 || $speed > 99999) {
    form_set_error('delay', t('Please enter a number between 0 and 99999.'));
  }
  
  // Ensure that the imagecache preset is valid.
  if (module_exists('imagecache') && $form_state['values']['preset'] && !count(imagecache_preset($form_state['values']['preset']))) {
    form_set_error('preset', t('Please choose a valid imagecache preset or choose not to use imagecache'));
  }
}

function fancy_slide_edit_form_submit($form_id, &$form_state) {
  $slide = array();
  
  if ($form_state['values']['sid']) {
    $slide['sid'] = $form_state['values']['sid'];
  }
  
  $slide['name'] = $form_state['values']['slideshow_name'];
  list($slide['width'], $slide['height']) = explode('x', $form_state['values']['dimensions']);
  $slide['type'] = $form_state['values']['type'];
  $slide['animation'] = $form_state['values']['animation'];
  $slide['nodequeue'] = $form_state['values']['nodequeue'];
  $slide['field'] = $form_state['values']['slidefield'];
  $slide['delay'] = $form_state['values']['delay'];
  $slide['preset'] = $form_state['values']['preset'];
  $slide['vertical'] = $form_state['values']['vertical'];
  $slide['continuous'] = $form_state['values']['continuous'];
  $slide['transition_speed'] = $form_state['values']['transition_speed'];
  $slide['show_controls'] = $form_state['values']['show_controls'];
  $slide['slide_controls'] = $form_state['values']['slide_controls'];
  
  if ($title = $form_state['values']['nid']) {
    $slide['nid'] = db_result(db_query_range(
      "SELECT nid FROM {node} WHERE title = '%s'", $title, 0, 1
    ));
  }
  
  if ($slide['sid']) {
    fancy_slide_update($slide);
  }
  else {
    fancy_slide_add($slide);
  }
}

function fancy_slide_form() {
  $form = array();
  $slideshows = fancy_slide_get_all();
  $slidetypes = fancy_slide_options_types();
  
  foreach ($slideshows as $key => $slideshow) {
    $form['slidename'][$key] = array('#value' => $slideshow['name']);
    $form['dimensions'][$key] = array('#value' => $slideshow['width'] . 'x' . $slideshow['height']);
    $form['type'][$key] = array('#value' => $slidetypes[$slideshow['type']]);
    
    switch ($slideshow['type']) {
      default:
      case FANCY_SLIDE_TYPE_SINGLE:
        $form['nodeinfo'][$key] = array('#value' => t('Node:') . ' ' . $slideshow['node_title']);
        break;
        
      case FANCY_SLIDE_TYPE_NODEQUEUE:
        $form['nodeinfo'][$key] = array('#value' => t('Nodequeue:') . ' ' . $slideshow['nodequeue_title']);
        break;
    }
  }
  
  return $form;
}

/**
 * Get the specified slideshow.
 * 
 * @param $sid int
 *    The ID of the slideshow.
 * @return array
 *    FALSE if the slideshow doesn't exist. Otherwise, an array representing the
 *    slideshow, with the following keys:
 *    - sid
 *    - name
 *    - width
 *    - height
 *    - field (the field within the node that contains the images)
 *    - delay (between slides, in seconds)
 *    - preset (the imagecache preset to use, if any)
 *    - vertical (TRUE for vertical animation, FALSE for horizontal)
 *    - type (type of slideshow, such as single node or nodequeue)
 *    - nodequeue (nodequeue subqueue ID, if any)
 *    - nid (node ID, if any)
 */
function fancy_slide_get($sid) {
  $result = db_query(
    "SELECT sid, name, width, height, field, delay, preset, vertical, type,
       nodequeue, nid, animation, continuous, transition_speed, show_controls,
       slide_controls
     FROM {fancy_slide}
     WHERE sid = %d",
    $sid
  );
  
  $row = db_fetch_object($result);
  
  if ($row) {
    return _fancy_slide_process_row($row);
  }
  else {
    return FALSE;
  }
}

/**
 * Get all the slideshows.
 *
 * @return array
 *    An array of slideshows, keyed by the slideshow ID. The values are arrays,
 *    each of which contains a slideshow. See the documentation for
 *    fancy_slide_get for the array format.
 *    
 * @see fancy_slide_get()
 */
function fancy_slide_get_all() {
  static $fancy_slide_all;
  
  if (!isset($fancy_slide_all)) {
    $fancy_slide_all = array();
    $result = db_query(
      "SELECT sid, name, width, height, field, delay, preset, vertical, type,
         nodequeue, nid, animation, continuous, transition_speed, show_controls,
         slide_controls
       FROM {fancy_slide}
       ORDER BY sid ASC"
    );
    
    while ($row = db_fetch_object($result)) {
      $temp = _fancy_slide_process_row($row);
      $fancy_slide_all[$temp['sid']] = $temp;
    }
  }
  
  return $fancy_slide_all;
}

/**
 * Implementation of hook_init().
 * 
 * There is no way to know ahead of time whether a slideshow will be on the page
 * or not, so we must preempt this possibility and add the necessary CSS and JS
 * on every page.
 */
function fancy_slide_init() {
  // Add the JavaScript and CSS needed for the slideshow.
  $path = drupal_get_path('module', 'fancy_slide');
  drupal_add_js($path . '/js/fancy_slide.js');
  drupal_add_css($path . '/css/fancy_slide.css');
}

/**
 * Implementation of hook_menu().
 */
function fancy_slide_menu() {
  $items = array();
  
  $items['admin/content/fancy-slide'] = array(
    'title'             => 'Fancy Slide',
    'description'       => 'A list of the Fancy Slide slideshows',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('fancy_slide_form'),
    'access arguments'  => array('administer fancy_slide'),
  );
  $items['admin/content/fancy-slide/list'] = array(
    'title'             => 'List',
    'description'       => 'A list of the Fancy Slide slideshows',
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('fancy_slide_form'),
    'access arguments'  => array('administer fancy_slide'),
  );
  $items['admin/content/fancy-slide/add'] = array(
    'title'             => 'Add',
    'description'       => 'Add a new Fancy Slide slideshow',
    'type'              => MENU_LOCAL_TASK,
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('fancy_slide_edit_form'),
    'access arguments'  => array('administer fancy_slide'),
  );
  $items['admin/content/fancy-slide/edit/%'] = array(
    'title'             => 'Edit',
    'description'       => 'Edit a Fancy Slide slideshow',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('fancy_slide_edit_form', 4),
    'access arguments'  => array('administer fancy_slide'),
  );
  $items['admin/content/fancy-slide/delete/%'] = array(
    'title'             => 'Delete',
    'description'       => 'Delete a Fancy Slide slideshow',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'fancy_slide_delete',
    'page arguments'    => array(4),
    'access arguments'  => array('administer fancy_slide'),
  );
  $items['fancy-slide/autocomplete-nid'] = array(
    'title'             => 'Autocomplete node ID',
    'description'       => 'AJAX autocomplete for the slideshow node selector',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'fancy_slide_autocomplete_nid',
    'access arguments'  => array('administer fancy_slide'),
  );
  
  return $items;
}

/**
 * Generate a list of CCK fields suitable for use on a FAPI form.
 */
function fancy_slide_options_fields() {
  $fields = content_fields();
  $myfields = array();
  
  foreach ($fields as $key => $field) {
    $myfields[$key] = $field['widget']['label'] . ' (' . $key . ')';
  }
  
  // If there are no CCK fields yet, warn the user by adding a single row to the
  // select element.
  if (!count($myfields)) {
    $myfields['null'] = t('No fields');
  }
  
  return $myfields;
}

/**
 * Generate a list of nodequeues suitable for use on a FAPI form.
 */
function fancy_slide_options_nodequeues() {
  $nodequeues = array();
  $result = db_query(
    "SELECT sqid, title FROM {nodequeue_subqueue} ORDER BY title ASC"
  );
  
  while ($row = db_fetch_object($result)) {
    $nodequeues[$row->sqid] = $row->title;
  }
  
  // If there are no nodequeues, display a single entry in the select list to
  // warn the user.
  if (!count($nodequeues)) {
    $nodequeues[0] = t('No nodequeues found');
  }
  
  return $nodequeues;
}

/**
 * Generate a list of imagecache presets suitable for use on a FAPI form.
 */
function fancy_slide_options_presets() {
  $presets = imagecache_presets();
  $output = array();
  $output[0] = t('Do not use imagecache');
  
  foreach ($presets as $preset) {
    $output[$preset['presetid']] = $preset['presetname'];
  }
  
  return $output;
}

/**
 * Generates a set of slideshow types suitable for use on a FAPI form.
 */
function fancy_slide_options_types() {
  $types = array();
  $types[FANCY_SLIDE_TYPE_SINGLE] = t('Single node');
  
  if (module_exists('nodequeue')) {
    $types[FANCY_SLIDE_TYPE_NODEQUEUE] = t('Nodequeue');
  }
  
  return $types;
}

/**
 * Implementation of hook_perm().
 */
function fancy_slide_perm() {
  return array(
    'administer fancy_slide',
  );
}

/**
 * Convert a database row to a slideshow array.
 * 
 * @param $row object
 *    The database row, obtained from db_fetch_object.
 * @return array
 *    The slideshow as an array. See the documentation for fancy_slide_get for
 *    the array format.
 *    
 * @see fancy_slide_get()
 */
function _fancy_slide_process_row($row) {
  $slide = array();
  
  $slide['sid'] = $row->sid;
  $slide['name'] = $row->name;
  $slide['width'] = $row->width;
  $slide['height'] = $row->height;
  $slide['field'] = $row->field;
  $slide['delay'] = $row->delay;
  
  // If a preset has been specified, make sure that the named preset is valid.
  $slide['imagecache'] = FALSE;
  $slide['preset'] = $row->preset;
  
  if ($row->preset) {
    $preset = imagecache_preset($row->preset);
    $slide['preset_name'] = $preset['presetname'];
    
    if ($slide['preset_name']) {
      $slide['imagecache'] = TRUE;
    }
  }
  
  $slide['vertical'] = $row->vertical;
  $slide['type'] = $row->type;
  $slide['nodequeue'] = $row->nodequeue;
  $slide['animation'] = $row->animation;
  $slide['transition_speed'] = $row->transition_speed;
  $slide['continuous'] = $row->continuous;
  $slide['show_controls'] = $row->show_controls;
  $slide['slide_controls'] = $row->slide_controls;
  
  if ($row->nodequeue) {
    $slide['nodequeue_title'] = db_result(db_query(
      "SELECT title FROM {nodequeue_subqueue} WHERE sqid = %d", $row->nodequeue
    ));
  }
  
  $slide['nid'] = $row->nid;
  
  if ($row->nid) {
    $slide['node_title'] = db_result(db_query(
      "SELECT title FROM {node} WHERE nid = %d", $row->nid
    ));
  }
  
  return $slide;
}

/**
 * Render a slideshow's images, returning them as an array.
 * 
 * @param $sid int
 *    The slideshow ID.
 * @return array
 *    An array of slideshow images, whose keys are numeric and 0-based, and
 *    values are each an array, keyed as follows:
 *    - imagepath
 *    - imagealt
 *    - rendered (the full XHTML of the rendered image, using imagecache where
 *      necessary)
 */
function fancy_slide_render($sid) {
  $slideshow = fancy_slide_get($sid);
  $slides = array();
  
  switch ($slideshow['type']) {
    default:
    case FANCY_SLIDE_TYPE_SINGLE:
      // This is a single node slideshow, so load the node fully and process
      // all the slideshow images.
      $node = node_load($slideshow['nid']);
      
      // Make sure the slideshow image field actually exists on this node.
      if ($node->{$slideshow['field']}) {
        foreach ($node->{$slideshow['field']} as $image) {
          // Only process if the image has a filepath.
          if ($image['filepath']) {
            $slides[] = _fancy_slide_render_image($image, $slideshow['imagecache'] ? $slideshow['preset_name'] : NULL, 'node/'.$node->nid);
          }
        }
      }
      break;
      
    case FANCY_SLIDE_TYPE_NODEQUEUE:
      // This is a nodequeue slideshow, so load the nodes in the queue.
      $nodes = nodequeue_load_nodes($slideshow['nodequeue'], FALSE, 0, 0);
      
      foreach ($nodes as $node) {
        // Make sure that the slideshow image field exists on this node.
        if ($node->{$slideshow['field']}[0]['filepath']) {
          $slides[] = _fancy_slide_render_image($node->{$slideshow['field']}[0], $slideshow['imagecache'] ? $slideshow['preset_name'] : NULL, 'node/'.$node->nid);
        }
      }
      
      break;
  }
  return $slides;
}

/**
 * Given an imagefield image, render it into a fancy_slide slide.
 * 
 * @param $image array
 *    An imagefield array, with keys such as filepath, filename and data.
 * @param $presetname string
 *    The imagecache preset to use to render the image, or NULL if imagecache
 *    should not be used.
 * @param $link string
 *    The path that the image should link to, if any.
 * @return array
 *    A slideshow image array. See fancy_slide_render for full documentation
 *    on this array.
 * @see fancy_slide_render()
 */
function _fancy_slide_render_image($image, $presetname = NULL, $link = NULL) {
  $slide = array();
  $slide['imagepath'] = $image['filepath'];
  $slide['imagealt'] = $image['data']['alt'];

  if ($presetname) {
    // Use imagecache to render the image with the specified preset.
    $slide['rendered'] = theme(
      'imagecache',
      $presetname,
      $slide['imagepath'],
      $slide['imagealt']
    );
    
    // Add the link if necessary.
    if ($link) {
      $slide['rendered'] = l($slide['rendered'], $link, array('html' => TRUE));
    }
  }
  else {
    // Don't use imagecache to render the image, just the normal method.
    $slide['rendered'] = theme(
      'image',
      $slide['imagepath'],
      $slide['imagealt']
    );
    
  // Add the link if necessary.
    if ($link) {
      $slide['rendered'] = l($slide['rendered'], $link, array('html' => TRUE));
    }
  }
  
  return $slide;
}

/**
 * Implementation of hook_theme().
 */
function fancy_slide_theme() {
  return array(
    'fancy_slide'           => array(
      'arguments' => array(
        'slideshow' => 1,
      ),
      'template'  => 'fancy-slide',
    ),
    'fancy_slide_form'      => array(
      'arguments' => array(
        'form'    => NULL,
      ),
    ),
  );
}

/**
 * Update a slideshow in the database.
 * 
 * @param $slide array
 *    The slideshow to be updated, with the appropriate details. For the format
 *    of the array, see the documentation for fancy_slide_get.
 * @see fancy_slide_get()
 */
function fancy_slide_update($slide) {
  drupal_write_record('fancy_slide', $slide, 'sid');
}

/**
 * Preprocess function for theme_fancy_slide().
 */
function template_preprocess_fancy_slide(&$vars) {
  $slideshow = fancy_slide_get($vars['slideshow']);
  $sid = $slideshow['sid'];
  
  // Compile the width and height into CSS form so we can supply this as an
  // inline style to the main fancyslide div. Using inline styles is never ideal
  // but this appears to be the best available solution.
  $styles = array(
    'width: ' . $slideshow['width'] . 'px',
    'height: ' . $slideshow['height'] . 'px',
  );
  
  $vars['fancyslide_styles'] = implode('; ', $styles);
  
  // Create a javascript array of options to be used when creating the
  // slideshow.
  $opts = array();
  $opts[] = 'animation: "' . $slideshow['animation'] . '"';
  $opts[] = 'continuous: ' . ($slideshow['continuous'] ? 'true' : 'false');
  $opts[] = 'showControls: ' . ($slideshow['show_controls'] ? 'true' : 'false');
  $opts[] = 'slideControls: ' . ($slideshow['slide_controls'] ? 'true' : 'false');
  $opts[] = 'speed: ' . $slideshow['transition_speed'];
  $opts[] = 'vertical: ' . ($slideshow['vertical'] ? 'true' : 'false');
  
  // If the delay is set to 0, prevent automatic transition to next slide.
  // Otherwise, set up the delay before going to the next slide.
  if ($slideshow['delay'] == 0) {
    $opts[] = 'rotate: false';
  }
  else {
    $opts[] = 'pause: ' . $slideshow['delay'] * 1000;
  }

  $opts = implode(', ', $opts);
  //$opts = '';
  
  $vars['fancyslide_js'] = <<<EOT
$(document).ready(function() {
  $("#fancy-slide-$sid").fancySlide({
    $opts
  });
});
EOT;
  
  $vars['sid'] = $sid;
  $vars['slides'] = fancy_slide_render($vars['slideshow']);
}

/**
 * Theme function for the FAPI form fancy_slide_form().
 */
function theme_fancy_slide_form($form) {
  $header = array(
    t('Name'),
    t('Dimensions'),
    t('Type'),
    t('Source'),
    t('Operations'),
  );
  $rows = array();
  $slideshows = fancy_slide_get_all();
  
  foreach ($slideshows as $key => $slideshow) {
    $row = array();
    $row[] = drupal_render($form['slidename'][$key]);
    $row[] = drupal_render($form['dimensions'][$key]);
    $row[] = drupal_render($form['type'][$key]);
    $row[] = drupal_render($form['nodeinfo'][$key]);

    $links = array(
      l(
        t('edit'),
        'admin/content/fancy-slide/edit/' . $key,
        array('attributes' => array('title' => t('Edit this slideshow')))
      ),
      l(
        t('delete'),
        'admin/content/fancy-slide/delete/' . $key,
        array('attributes' => array('title' => t('Delete this slideshow')))
      ),
    );
    
    $row[] = implode(' | ', $links);
    
    $rows[] = $row;
  }
  fancy_slide_render(1);
  return theme('table', $header, $rows);
}
