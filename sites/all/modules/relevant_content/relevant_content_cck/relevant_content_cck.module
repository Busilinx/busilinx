<?php
// $Id: relevant_content_cck.module,v 1.1.4.3 2008/11/06 12:49:29 njt1982 Exp $

/**
 * @file
 * Optional extension to CCK (Content Construction Kit) to provide a read-only field which allows embedding of relevant content within any node type.
 */


/**
 * Implementation of hook_theme().
 */
function relevant_content_cck_theme() {
  return array(
    'relevant_content_cck_field'                => array('arguments' => array('element' => NULL)),
    'relevant_content_cck_field_format_default' => array('arguments' => array('element' => NULL)),
    'relevant_content_cck_field_format_plain'   => array('arguments' => array('element' => NULL)),
    'relevant_content_cck_field_format_teaser'  => array('arguments' => array('element' => NULL)),
    'relevant_content_cck_field_format_full'    => array('arguments' => array('element' => NULL)),
  );
}


/**
 * Implementation of hook_field_info().
 */
function relevant_content_cck_field_info() {
  return array(
    'relevant_content' => array(
      'label' => t('Relevant Content'),
      'description' => t('A read only field for listing relevant nodes.'),
    ),
  );
}


/**
 * Implementation of hook_field_settings().
 */
function relevant_content_cck_field_settings($op, $field) {
  switch ($op) {
    case 'form' :
      $form = array();

      $form['multiple'] = $form['required'] = array('#type' => 'value');

      $form['relevant_nodetypes'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Relevant Node Types'),
        '#default_value' => isset($field['relevant_nodetypes']) ? $field['relevant_nodetypes'] : array(),
        '#options' => node_get_types('names'),
        '#required' => TRUE,
        '#description' => t('Select the node types you would like to include in this <em>Relevant Content Field</em>'),
      );

      $vocabs = array();
      foreach (taxonomy_get_vocabularies() as $vid => $voc) {
        $vocabs[$vid] = $voc->name;
      }
      $form['relevant_vocabs'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Relevant Vocabularies'),
        '#default_value' => isset($field['relevant_vocabs']) ? $field['relevant_vocabs'] : array(),
        '#options' => $vocabs,
        '#required' => TRUE,
        '#description' => t('Select the vocabularies you would like to include in this <em>Relevant Content Field</em>. Only terms in the selected vocabularies will be used to find relevant content.'),
      );

      $form['relevant_result_limit'] = array(
        '#type' => 'textfield',
        '#title' => t('Results Per Page'),
        '#description' => t('Relevant content to display per page. Must be more than 0'),
        '#default_value' => isset($field['relevant_result_limit']) ? $field['relevant_result_limit'] : 5,
        '#required' => TRUE,
      );


      $form['relevant_header'] = array(
        '#tree' => TRUE,
        '#title' => t('Header Text'),
        '#type' => 'fieldset',
        '#description' => t('Optionally include some text to appear above the list and below the label (if the label is enabled).'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['relevant_header']['body'] = array(
        '#type' => 'textarea',
        '#default_value' => isset($field['relevant_header']['body']) ? $field['relevant_header']['body'] : '',
      );
      $form['relevant_header']['format'] = filter_form($field['relevant_header']['format'], NULL, array('relevant_header', 'format'));

      return $form;

    case 'save' :
      return array('relevant_nodetypes', 'relevant_vocabs', 'relevant_result_limit', 'relevant_header');
  }
}


/**
 * Implementation of hook_field().
 */
function relevant_content_cck_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'load':
      //Get the terms using the handy term wrapper in the parent module
      $terms = relevant_content_get_page_terms($node);

      // If there are no terms, return an empty item set - there will be nothing in common with this.
      if (empty($terms)) return array($field['field_name'] => array());

      // Grab the types & vocabs
      $types  = array_values(array_filter($field['relevant_nodetypes']));
      $vocabs = array_values(array_filter($field['relevant_vocabs']));

      // Filter the terms from the vocabs associated with this field.
      foreach ($terms as $tid => $term) {
        if (in_array($term->vid, $vocabs)) {
          $terms[$tid] = $tid;
        }
        else {
          unset($terms[$tid]);
        }
      }

      // If there are no terms *after* filtering, return an empty item set - there will be nothing in common with this.
      if (empty($terms)) return array($field['field_name'] => array());

      // Search for items and return the item set.
      $items = relevant_content_get_nodes($types, $terms, array($node->nid), $field['relevant_result_limit']);
      return array(
        $field['field_name'] => array(
          'items' => $items,
          'header' => $field['relevant_header'],
          '#theme' => 'relevant_content_cck_field',
        )
      );

    case 'sanitize' :
      if (!empty($items['header'])) {
        $items['header']['safe'] = check_markup($items['header']['body'], $items['header']['format'], FALSE);
      }
      break;
  }
}


/**
 * Implementation of hook_field_formatter_info().
 */
function relevant_content_cck_field_formatter_info() {
  return array(
    'default' => array('multiple values' => CONTENT_HANDLE_MODULE, 'field types' => array('relevant_content'), 'label' => t('Node Title - Link')),
    'plain'   => array('multiple values' => CONTENT_HANDLE_MODULE, 'field types' => array('relevant_content'), 'label' => t('Node Title - Plain Text')),
    'teaser'  => array('multiple values' => CONTENT_HANDLE_MODULE, 'field types' => array('relevant_content'), 'label' => t('Node Teaser')),
    'full'    => array('multiple values' => CONTENT_HANDLE_MODULE, 'field types' => array('relevant_content'), 'label' => t('Node Full View')),
  );
}


/**
 * Field theming functions
 */
function theme_relevant_content_cck_field_format_default($element) {
  return l($element['title'], 'node/'. $element['nid']);
}

function theme_relevant_content_cck_field_format_plain($element) {
  return check_plain($element['title']);
}

function theme_relevant_content_cck_field_format_teaser($element) {
  return node_view(node_load($element['nid'], TRUE));
}

function theme_relevant_content_cck_field_format_full($element) {
  return node_view(node_load($element['nid'], FALSE));
}


/**
 * Implementation of hook_widget_info().
 */
function relevant_content_cck_widget_info() {
  return array(
    'relevant_content_list' => array(
      'label' => t('Relevant Nodes (Read Only)'),
      'field types' => array('relevant_content'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_NONE,
      ),
    ),
  );
}


/**
 * Implementation of hook_elements().
 */
function relevant_content_cck_elements() {
  return array(
    'relevant_content_list' => array(
      '#input' => FALSE,
    ),
  );
}


/**
 * Implementation of hook_widget().
 */
function relevant_content_cck_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  return array();
}


/**
 * Theme function for outputing a "Relevant Content" field. This is basically the same as theme_field() in the content.module of CCK,
 * but it also allows the optional header text.
 */
function theme_relevant_content_cck_field($element) {
  $items_output = '';
  $format = $element['#formatter'];
  $count = 1;
  foreach ($element['items']['#item'] as $delta => $item) {
    $items_output .= '<div class="field-item '. ($count % 2 ? 'odd' : 'even') .'">'. theme('relevant_content_cck_field_format_'. $format, $item) .'</div>';
    $count++;
  }

  $output = '';
  if (!empty($items_output)) {
    $output .= '<div class="field field-type-relevant-content field-'. check_plain(strtr($element['#field_name'], '_', '-')) .'">';
    if (!empty($element['header']['#item']['safe'])) {
      $output .= '<div class="field-header description">'. $element['header']['#item']['safe'] .'</div>';
    }
    $output .= '<div class="field-items">'. $items_output .'</div>';
    $output .= '</div>';
  }
  return $output;
}
