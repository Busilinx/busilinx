<?php
// $Id: dart_scheduler.module,v 1.2 2010/06/23 00:57:05 bleen18 Exp $

/**
 * Implementation of hook_perm().
 */
function dart_scheduler_perm() {
  return array('schedule DART tags');
}

/**
 * Implementation of hook_menu().
 */
function dart_scheduler_menu() {
  $items['admin/build/adtag/schedule'] = array(
    'title'             => 'Scheduled tag events',
    'description'       => 'Schedule when DART tags should be activated or deactivated',
    'page callback'     => 'dart_admin_event_list',
    'access arguments'  => array('schedule DART tags'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'dart_scheduler.admin.inc',
  );
  $items['admin/build/adtag/schedule/create'] = array(
    'title'             => 'Schedule new event',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('dart_admin_event'),
    'access arguments'  => array('schedule DART tags'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'dart_scheduler.admin.inc',
  );
  $items['admin/build/adtag/schedule/%dart_event/edit'] = array(
    'title'             => 'Edit event',
    'page callback'     => 'dart_event_edit',
    'page arguments'    => array(4),
    'access arguments'  => array('schedule DART tags'),
    'file'              => 'dart_scheduler.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_cron().
 */
function dart_cron() {
  // Grab all events scheduled to run "today" or earlier.
  $result = db_query('SELECT dtsid, dtid, event_type FROM {dart_tags_schedule} WHERE event_time <= date(now())');
  while ($event = db_fetch_array($result)) {
    // Trigger event accordingly.
    db_query('UPDATE {dart_tags} SET active = %d WHERE dtid = %d', array($event['event_type'] == 'activate' ? 1 : 0, $event['dtid']));
    // Delete the scheduled event so it isn't run again.
    db_query('DELETE FROM {dart_tags_schedule} WHERE dtsid = %d', array($event['dtsid']));
    watchdog('DART', 'Scheduled DART tag event: id#@dtid was @status', array('@dtid' => $event['dtid'], '@status' => $event['event_type'] . 'd'), WATCHDOG_NOTICE);
  }
}


/**
 * Return the DARTscheduled event object matching a DART Tag Schedule ID.
 *
 * @param $dtsid
 *   The DART tag's schedule ID
 *
 * @return
 *   The event object with all of its metadata, if exists, FALSE otherwise.
 *   Results are statically cached.
 */
function dart_event_load($dtsid) {
  static $events = array();

  if (!isset($events[$dtsid])) {
    // Create the DART tag scheduled event object.
    $result = db_query('SELECT * FROM {dart_tags_schedule} WHERE dtsid = %d', $dtsid);
    $events[$dtsid] = db_fetch_object($result);
  }

  return $events[$dtsid];
}

/**
 * Menu callback used to display DART tag edit form.
 *
 * @param $dart_tag
 *   The DART tag object
 *
 * @return
 *   Edit form
 */
function dart_event_edit($dart_event) {
  if (isset($_POST['op']) && $_POST['op'] == t('Cancel Event')) {
    return drupal_get_form('dart_admin_event_confirm_delete', $dart_event);
  }
  return drupal_get_form('dart_admin_event', (array)$dart_event);
}

/**
 * Delete a scheduled DART tag event from the database.
 *
 * @param $dtsid
 *   The DART tag's scheduled event ID
 */
function dart_event_delete($dtsid) {
  db_query('DELETE FROM {dart_tags_schedule} WHERE dtsid = %d', $dtsid);
}

/**
 * Implementation of hook_dart_tag().
 */
function dart_event_dart_tag($op, $tag) {
  switch ($op) {
    case 'delete':
      db_query('DELETE FROM {dart_tags_schedule} WHERE dtid = %d', $term->tid);
  }
}