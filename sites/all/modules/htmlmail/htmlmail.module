<?php

/**
 * @file
 * Sends system emails in HTML.
 */

/**
 * Implements hook_init().
 */
function htmlmail_init() {
  // Check all requirements in case an admin upgraded from 6.x-1.x to 6.x-2.x.
  $requirements = array(
    'echo' => 'Echo',
    'mailmime' => 'Mail MIME',
    'mailsystem' => 'Mail System',
  );
  foreach($requirements as $module => $name) {
    if (module_exists($module)) {
      unset($requirements[$module]);
      continue;
    }
    drupal_set_message(
      t('Please install the required <a href="%url">%name</a> module.',
        array(
          '%url' => "http://drupal.org/project/$module",
          '%name' => $name,
        )
      )
    );
  }
  if (!empty($requirements)) {
    module_disable(array('htmlmail'));
    drupal_set_message(
      t('The %branch branch of the <a href="%url">%name</a> module has new '
        . 'dependencies.  Install and enable the dependent modules, then re-'
        . 'enable <a href="%url">%name</a>.',
        array(
          '%branch' => '6.x-2.x',
          '%url' => "http://drupal.org/project/htmlmail",
          '%name' => 'HTML Mail',
        )
      )
    );
    drupal_goto('admin/build/modules');
  }
  // Always load the class because drupal 6 doesn't have class autoload.
  module_load_include('inc', 'htmlmail', 'htmlmail.mail');
}

/**
 * Implements hook_help().
 */
function htmlmail_help($path, $arg) {
  switch ($path) {
    case 'admin/help#htmlmail':
    case 'admin/settings/htmlmail':
      $output = '<p>' . t("HTML Mail provides formatting and semantic markup capabilities in email that are not available with plain text.") . '</p>';
    return $output;
  }
}

/**
 * Implements hook_menu().
 */
function htmlmail_menu() {
  $items['admin/settings/htmlmail'] = array(
    'title' => 'HTML Mail',
    'description' => 'Configure HTML Mail system-wide settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htmlmail_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'htmlmail.admin.inc',
  );
  $items['admin/settings/htmlmail/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-2'
  );
  $items['admin/settings/htmlmail/test'] = array(
    'title' => 'Send Test',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htmlmail_test_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'htmlmail.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function htmlmail_theme() {
  return array(
    'htmlmail' => array(
      'render element' => 'elements',
      'template' => 'htmlmail',
      'arguments' => array('message' => array()),
    ),
  );
}

/**
 * Process variables to format email messages.
 *
 * @see htmlmail.tpl.php
 */
function template_preprocess_htmlmail(array &$variables) {
  $message = $variables['message'];
  $variables += $message;
  $variables['debug'] = variable_get('htmlmail_debug', '0');
  $variables['theme_url'] = url($variables['directory'], array('absolute' => TRUE));
  $parts = explode('_', $variables['key']);
  $last = $variables['module'];
  if (empty($last)) {
    $last = array_shift($parts);
  }
  $last = 'htmlmail-' . $last;
  $variables['theme_hook_suggestions'][] = $last;
  foreach ($parts as $part) {
    $variables['theme_hook_suggestions'][] = $last .= '_' . $part;
  }
  // Backport of drupal 7 hook_preprocess_HOOK().
  foreach (module_implements('preprocess_htmlmail') as $module) {
    $function = $module . '_preprocess_htmlmail';
    $function($variables);
  }
}

/**
 * Implements hook_mail().
 */
function htmlmail_mail($key, &$message, $params) {
  $message['module'] = 'htmlmail';
  $message['key'] = $key;
  $message['subject'] = $params['subject'];
  $message['body'] = explode(
    MAIL_LINE_ENDINGS . MAIL_LINE_ENDINGS,
    $params['body']
  );
  return $message;
}

/**
 * Implements hook_user().
 */
function htmlmail_user($op, &$edit, $account, $category) {
  switch("$op.$category") {
    case 'form.account':
    case 'register.':
      return array(
        'htmlmail' => array(
          '#type' => 'fieldset',
          '#title' => t('HTML Mail'),
          '#collapsible' => TRUE,
          'htmlmail_plaintext' => array(
            '#type' => 'checkbox',
            '#title' => t('Plaintext-only emails'),
            '#default_value' => !empty($account->htmlmail_plaintext),
            '#description' => t(
              'The %htmlmail module can send emails with fonts, styles, and '
              . 'other HTML formatting.  If you prefer to receive all your '
              . 'emails in plain text, select this option.',
              array('%htmlmail' => 'HTML Mail')
            ),
          ),
        ),
      );
    default:
      return;
  }
}

/**
 * Returns an associative array of allowed themes.  The keys are the
 * machine-readable names and the values are the .info file names.
 * Based on code from the og_theme module.
 */
function &htmlmail_get_allowed_themes() {
  static $allowed = NULL;
  if (!isset($allowed)) {
    $allowed = array('' => t('No theme'));
    $themes = list_themes();
    module_load_include('inc', 'system', 'system.admin');
    uasort($themes, 'system_sort_modules_by_info_name');
    foreach ($themes as $key => $value) {
      if ($value->status) {
        $allowed[$key] = check_plain($value->info['name']);
      }
    }
  }
  return $allowed;
}

/**
 * Returns the selected theme to use for outgoing emails.
 */
function htmlmail_get_selected_theme(&$message = array()) {
  $selected = isset($message['theme'])
    ? $message['theme'] : variable_get('htmlmail_theme', '');
  // Make sure the selected theme is allowed.
  $themes = &htmlmail_get_allowed_themes();
  if (empty($themes[$selected])) {
    $selected = $GLOBALS['theme'];
  }
  return $selected;
}
